이때까지의 리스트는 dynamic array이다.

지금까지는 리스트의 시간복잡도와 특성을 살펴보았다.

Linked List는 Node로 구현되어 있다.

Array 리스트는 구현을 하지 않았다.

구현해야하는 것이 중요하다. 어떻게 구현하는가에 따라 문제를 풀수 있게됨

메모리적으로 어떻게 작동하는지 이해하고 구현하는 것을 목표로 한다.

#Linked list 정의

노드라는 구조체가 이어져 있는 형태이다.

노드 구조체는 요솟값과 다음 노드의 주솟값을 저장한다.

메모리적으로는 비연속적으로 저장되어 있지만 

논리적으로는 연속성을 가진다.

시간복잡도가 다 다르다.

array는 모두 연속적
linked는 논리적으로만 연속적

이 기준을 통해 문제에서 무엇을 활용할지 판단한다.

기존 array는 접근하는 방식이 처음 데이터의 위치에서 옮기는 방식이다.
O(1)

Lincked List는 비연속적으로 저장되어 있기 때문에

물리적 비연속적, 논리적 연속적 , 순차적

node는 데이터 뿐 아닌 다음 node의 address 정보도 갖고 있기 때문에
논리적으로 연속성을 유지 하면서 연결될 수 있다.

메모리 상에서 연속성을 유지하지 않아도 되기 때문에 메모리 사용이 좀더 자유롭다.

하지만, next node의 address도 추가적으로 저장되기 때문에 데이터 하나당 차지하는 메모리는

더 증가하게 된다.
 

